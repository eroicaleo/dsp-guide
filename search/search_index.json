{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! This is my notes for the book \"The Scientist and Engineer's Guide to Digital Signal Processing\" By Steven W. Smith, Ph.D. . Book link here","title":"Home"},{"location":"#welcome","text":"This is my notes for the book \"The Scientist and Engineer's Guide to Digital Signal Processing\" By Steven W. Smith, Ph.D. . Book link here","title":"Welcome!"},{"location":"ch03notes/","text":"Chapter 3 ADC and DAC Selecting The Antialias Filter The Chebyshev optimizes the roll-off, the Butterworth optimizes the passband flatness, and the Bessel optimizes the step response. 2 common ways for information to be encoded in an analog waveform, only two methods are common: time domain encoding time domain encoding uses the shape of the waveform to store information Example: electrocardiogram of EKG, Images. frequency domain encoding the information is contained in sinusoidal waves that combine to form the signal Example: Audio / Music changes the phase of the various sinusoids, looks different on scope, but sounds the same We need antialias filter with a sharp cutoff, such as a Chebyshev, Elliptic, or Butterworth. Step response is not important. Multirate Data Conversion Digital recorder example: Capture the frequencies between about 100 and 3000 hertz with 40 kHz noise Analog solution: 8-pole low-pass Chebyshev at 3 kHz, then sample at 8 kHz the DAC reconstructs the analog signal at 8 kHz with a zeroth order hold. Multirate techniques: sample the data at 64 kHz remove these unusable frequencies in software, by using a digital low-pass filter at 3 kHz resample the digital signal from 64 kHz to 8 kHz by simply discarding every seven out of eight samples, a procedure called decimation. 8 kHz data converter to 64 kHz with interpolation. Everything above 3 kHz is then removed with a digital low-pass filter. a simple RC network is all that is required to produce the final voice signal. The advantages for multirate data conversion: mass produced products digital filters outperform analog filters by hundreds of times in key areas. Single Bit Data Conversion Delta modulation Use a comparator, if input voltage is bigger than the voltage on the capacitor, output 1 and feedback to capacitor to increase the voltage if input voltage is smaller than the voltage on the capacitor, output 0 and feedback to capacitor to decrease the voltage Continuously Variable Slope Delta (CVSD) modulator If detected 4 consecutive 0/1 increase the charging/ discharging rate. At the receiver, the analog signal is reconstructed by incorporating a syllabic filter that is identical to the one in the transmission circuit.","title":"Chapter 03"},{"location":"ch03notes/#chapter-3-adc-and-dac","text":"","title":"Chapter 3 ADC and DAC"},{"location":"ch03notes/#selecting-the-antialias-filter","text":"The Chebyshev optimizes the roll-off, the Butterworth optimizes the passband flatness, and the Bessel optimizes the step response. 2 common ways for information to be encoded in an analog waveform, only two methods are common: time domain encoding time domain encoding uses the shape of the waveform to store information Example: electrocardiogram of EKG, Images. frequency domain encoding the information is contained in sinusoidal waves that combine to form the signal Example: Audio / Music changes the phase of the various sinusoids, looks different on scope, but sounds the same We need antialias filter with a sharp cutoff, such as a Chebyshev, Elliptic, or Butterworth. Step response is not important.","title":"Selecting The Antialias Filter"},{"location":"ch03notes/#multirate-data-conversion","text":"Digital recorder example: Capture the frequencies between about 100 and 3000 hertz with 40 kHz noise Analog solution: 8-pole low-pass Chebyshev at 3 kHz, then sample at 8 kHz the DAC reconstructs the analog signal at 8 kHz with a zeroth order hold. Multirate techniques: sample the data at 64 kHz remove these unusable frequencies in software, by using a digital low-pass filter at 3 kHz resample the digital signal from 64 kHz to 8 kHz by simply discarding every seven out of eight samples, a procedure called decimation. 8 kHz data converter to 64 kHz with interpolation. Everything above 3 kHz is then removed with a digital low-pass filter. a simple RC network is all that is required to produce the final voice signal. The advantages for multirate data conversion: mass produced products digital filters outperform analog filters by hundreds of times in key areas.","title":"Multirate Data Conversion"},{"location":"ch03notes/#single-bit-data-conversion","text":"Delta modulation Use a comparator, if input voltage is bigger than the voltage on the capacitor, output 1 and feedback to capacitor to increase the voltage if input voltage is smaller than the voltage on the capacitor, output 0 and feedback to capacitor to decrease the voltage Continuously Variable Slope Delta (CVSD) modulator If detected 4 consecutive 0/1 increase the charging/ discharging rate. At the receiver, the analog signal is reconstructed by incorporating a syllabic filter that is identical to the one in the transmission circuit.","title":"Single Bit Data Conversion"},{"location":"udsp01/","text":"Chapter 01 Discrete Sequences and Systems 1.1 DISCRETE SEQUENCES AND THEIR NOTATION Think of a continuous sinewave with a peak amplitude of 1 at a frequency f_o described by the equation \\tag{1-1} x(t) = \\sin 2 \\pi f_o t Those sample values can be represented collectively, and concisely, by the discrete-time expression \\tag{1-3} x(n) = \\sin 2 \\pi f_o n t_s 1.2 SIGNAL AMPLITUDE, MAGNITUDE, POWER If we assume that the proportionality constant is one, we can express the power of a sequence in the time or frequency domains as \\tag{1-8} x_{pwr}(n) = |x(n)|^2 or \\tag{1-8'} X_{pwr}(m) = |X(m)|^2 1.3 SIGNAL PROCESSING OPERATIONAL SYMBOLS Addition a(n) = b(n) + c(n) Subtraction a(n) = b(n) - c(n) Summation \\begin{split} a(n) &= \\sum_{k=n}^{n+3} b(k) \\\\ &= b(n) + b(n+1) + b(n+2) + b(n+3) \\end{split} Multiplication a(n) = b(n)c(n) = b(n) \\cdot c(n) 1.8 ANALYZING LINEAR TIME-INVARIANT SYSTEMS If we know the unit impulse response of an LTI system, we can calculate everything there is to know about the system; that is, the system\u2019s unit impulse response completely characterizes the system. By \u201cunit impulse response\u201d we mean the system\u2019s time-domain output sequence when the input is a single unity-valued sample (unit impulse) preceded and followed by zero-valued samples as shown in Figure 1\u201311(b). The concepts in the two following sentences are among the most important principles in all of digital signal processing! Knowing the (unit) impulse response of an LTI system, we can determine the system\u2019s output sequence for any input sequence because the output is equal to the convolution of the input sequence and the system\u2019s impulse response. Given an LTI system\u2019s time-domain impulse response, we can find the system\u2019s frequency response by taking the Fourier transform in the form of a discrete Fourier transform of that impulse response In the world of DSP, an impulse sequence called a unit impulse takes the form \\tag{1-26} x(n) = \\cdots,0,0,0,0,0,A,0,0,0,0,0,\\cdots The leading 0 must be long enough, so the system is outputing 0. The trailing 0 must also be long enough, so it's longer than the transient response.","title":"Understanding DSP Chapter 01"},{"location":"udsp01/#chapter-01-discrete-sequences-and-systems","text":"","title":"Chapter 01 Discrete Sequences and Systems"},{"location":"udsp01/#11-discrete-sequences-and-their-notation","text":"Think of a continuous sinewave with a peak amplitude of 1 at a frequency f_o described by the equation \\tag{1-1} x(t) = \\sin 2 \\pi f_o t Those sample values can be represented collectively, and concisely, by the discrete-time expression \\tag{1-3} x(n) = \\sin 2 \\pi f_o n t_s","title":"1.1 DISCRETE SEQUENCES AND THEIR NOTATION"},{"location":"udsp01/#12-signal-amplitude-magnitude-power","text":"If we assume that the proportionality constant is one, we can express the power of a sequence in the time or frequency domains as \\tag{1-8} x_{pwr}(n) = |x(n)|^2 or \\tag{1-8'} X_{pwr}(m) = |X(m)|^2","title":"1.2 SIGNAL AMPLITUDE, MAGNITUDE, POWER"},{"location":"udsp01/#13-signal-processing-operational-symbols","text":"Addition a(n) = b(n) + c(n) Subtraction a(n) = b(n) - c(n) Summation \\begin{split} a(n) &= \\sum_{k=n}^{n+3} b(k) \\\\ &= b(n) + b(n+1) + b(n+2) + b(n+3) \\end{split} Multiplication a(n) = b(n)c(n) = b(n) \\cdot c(n)","title":"1.3 SIGNAL PROCESSING OPERATIONAL SYMBOLS"},{"location":"udsp01/#18-analyzing-linear-time-invariant-systems","text":"If we know the unit impulse response of an LTI system, we can calculate everything there is to know about the system; that is, the system\u2019s unit impulse response completely characterizes the system. By \u201cunit impulse response\u201d we mean the system\u2019s time-domain output sequence when the input is a single unity-valued sample (unit impulse) preceded and followed by zero-valued samples as shown in Figure 1\u201311(b). The concepts in the two following sentences are among the most important principles in all of digital signal processing! Knowing the (unit) impulse response of an LTI system, we can determine the system\u2019s output sequence for any input sequence because the output is equal to the convolution of the input sequence and the system\u2019s impulse response. Given an LTI system\u2019s time-domain impulse response, we can find the system\u2019s frequency response by taking the Fourier transform in the form of a discrete Fourier transform of that impulse response In the world of DSP, an impulse sequence called a unit impulse takes the form \\tag{1-26} x(n) = \\cdots,0,0,0,0,0,A,0,0,0,0,0,\\cdots The leading 0 must be long enough, so the system is outputing 0. The trailing 0 must also be long enough, so it's longer than the transient response.","title":"1.8 ANALYZING LINEAR TIME-INVARIANT SYSTEMS"},{"location":"udsp01ex/","text":"Chapter 01 Discrete Sequences and Systems 1.1 This problem gives us practice in thinking about sequences of numbers. For centuries mathematicians have developed clever ways of computing \u03c0 . In 1671 the Scottish mathematician James Gregory proposed the following very simple series for calculating \u03c0 : \u03c0 = 4 \\cdot \\left\\{ 1 - \\frac{1}{3} + \\frac{1}{5} - \\frac{1}{7} + \\cdots \\right\\} Thinking of the terms inside the parentheses as a sequence indexed by the variable n , where n = 0, 1, 2, 3, . . ., 100 , write Gregory\u2019s algorithm in the form \u03c0 = 4 \\cdot \\sum_{n = 0}^{100} (-1)^? ? replacing the \u201c?\u201d characters with expressions in terms of index n . Solution : \u03c0 = 4 \\cdot \\sum_{n = 0}^{100} (-1)^n \\frac{1}{2n+1} \\square 1.2 One of the ways to obtain discrete sequences, for follow-on processing, is to digitize a continuous (analog) signal with an analog-to-digital (A/D) con- verter. A 6-bit A/D converter\u2019s output words (6-bit binary words) can only represent 26=64 different numbers. (We cover this digitization, sampling, and A/D converters in detail in upcoming chapters.) Thus we say the A/D converter\u2019s \u201cdigital\u201d output can only represent a finite number of amplitude values. Can you think of a continuous time-domain electrical signal that only has a finite number of amplitude values? If so, draw a graph of that continuous-time signal. Solution : Maybe a electrical piano. 1.3 On the Internet, the author once encountered the following line of C-language code PI = 2 * asin(1.0) whose purpose was to define the constant \u03c0 . In standard mathematical notation, that line of code can be described by \u03c0 = \\sin ^{-1} (1.0) Under what assumption does the above expression correctly define the constant \u03c0 ? Solution : The assumption should be we have infinite precision. 1.4 Many times in the literature of signal processing you will encounter the identity x^0 = 1 That is, x raised to the zero power is equal to one. Using the Laws of Exponents, prove the above expression to be true. Proof : 1 = x^1 x^{-1} = x^{1 + (-1)} = x^0 \\square 1.5 Recall that for discrete sequences the t_s sample period (the time period between samples) is the reciprocal of the sample frequency f_s . Write the equations, as we did in the text\u2019s Eq. (1\u20133) , describing time-domain sequences for unity-amplitude cosine waves whose f_o frequencies are (a) f_o = f_s / 2 , one-half the sample rate. Solution : x(n) = \\cos 2 \\pi f_o n t_s \\\\ = \\cos 2 \\pi (f_s / 2) n (1 / f_s) \\\\ = \\cos n \\pi = (-1)^n \\square (b) f_o = f_s / 4 , one-fourth the sample rate. Solution : x(n) = \\cos 2 \\pi f_o n t_s \\\\ = \\cos 2 \\pi (f_s / 4) n (1 / f_s) \\\\ = \\cos \\frac{n}{2} \\pi \\square (c) f_o = 0 (zero) Hz Solution : x(n) = \\cos 2 \\pi f_o n t_s = \\cos 0 = 1 \\square 1.6 Draw the three time-domain cosine wave sequences, where a sample value is represented by a dot, described in Problem 1.5. The correct solution to Part (a) of this problem is a useful sequence used to convert some lowpass digital filters into highpass filters. (Chapter 5 discusses that topic.) The correct solution to Part (b) of this problem is an important discrete sequence used for frequency translation (both for signal down-conversion and up-conversion) in modern-day wireless communications systems. The correct solution to Part (c) of this problem should convince us that it\u2019s perfectly valid to describe a cosine sequence whose frequency is zero Hz. Solution import numpy as np import matplotlib.pyplot as plt # 1.6.(a) n = np.arange(10); fs = 2.0 fo = fs / 2.0 ts = 1.0 / fs x = np.cos(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\cos (2\\pi 1.0 n \\Delta t)$'); plt.stem(n, x); # 1.6.(b) n = np.arange(10); fs = 2.0 fo = fs / 4.0 ts = 1.0 / fs x = np.cos(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\cos (2\\pi 0.5 n \\Delta t)$'); plt.stem(n, x); # 1.6.(c) n = np.arange(10); fs = 2.0 fo = 0 ts = 1.0 / fs x = np.cos(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\cos (2\\pi 0 n t_s)$'); plt.stem(n, x); 1.7 Draw the three time-domain sequences of unity-amplitude sinewaves (not cosine waves) whose frequencies are (a) f_o = f_s / 2 , one-half the sample rate. (b) f_o = f_s / 4 , one-fourth the sample rate. (c) f_o = 0 (zero) Hz The correct solutions to Parts (a) and (c) show us that the two frequencies, 0 Hz and fs/2 Hz, are special frequencies in the world of discrete signal processing. What is special about the sinewave sequences obtained from the above Parts (a) and (c)? Solution : # 1.7.(a) n = np.arange(10); fs = 2.0 fo = fs / 2.0 ts = 1.0 / fs x = np.sin(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\sin (2\\pi 1.0 n 0.5)$'); plt.stem(n, x); plt.ylim(-1, 1) # 1.7.(b) n = np.arange(10); fs = 2.0 fo = fs / 4.0 ts = 1.0 / fs x = np.sin(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\sin (2\\pi 2.0 n 0.5)$'); plt.stem(n, x); # 1.7.(c) n = np.arange(10); fs = 2.0 fo = 0 ts = 1.0 / fs x = np.sin(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\sin (2\\pi 0.0 n 0.5)$'); plt.stem(n, x); Part (a) and (c) are special because they sampled all 0. 1.8 Consider the infinite-length time-domain sequence x(n) in Figure P1\u20138. Draw the first eight samples of a shifted time sequence defined by x_{shift}(n) = x(n+1) # 1.8 n = np.arange(7); nz = np.arange(0, 7, 0.01); fs = 4 fo = 1 ts = 1.0 / fs x = -np.sin(2 * np.pi * fo * n * ts) z = -np.sin(2 * np.pi * fo * nz * ts) plt.xlabel('n'); plt.ylabel('$x_{shift}[n]$'); plt.title(r'Plot of DT signal $x[n] = \\sin (2\\pi 1.0 n 0.25)$'); plt.plot(n, x, 'o'); plt.plot(nz, z, '--'); plt.show() 1.9 Assume, during your reading of the literature of DSP, you encounter the process shown in Figure P1\u20139. The x(n) input sequence, whose f_s sample rate is 2500 Hz, is multiplied by a sinusoidal m(n) sequence to produce the y(n) output sequence. What is the frequency, measured in Hz, of the sinusoidal m(n) sequence? Solution : Assume m(n) = \\sin (2 \\pi f_o n t_s) Then we know 2 \\pi f_o n t_s = 0.8 \\pi n \\\\ \\Rightarrow \\\\ f_o = 0.4 f_s = 1000 1.10 There is a process in DSP called an \u201cN-point running sum\u201d (a kind of digital lowpass filter, actually) that is described by the following equation: y(n) = \\sum_{p = 0}^{N - 1} x(n-p) Write out, giving the indices of all the x() terms, the algebraic expression that describes the computations needed to compute y(9) when N=6 . Solution : y(9) = x(9) + x(8) + x(7) + x(6) + x(5) + x(4) \\square 1.11 A 5-point moving averager can be described by the following difference equation: \\tag{P1-1} y(n) = \\frac{1}{5} [x(n) + x(n-1) + x(n-2) + x(n-3) + x(n-4)] = \\frac{1}{5} \\sum_{k = n-4}^{n} x(k) The averager\u2019s signal-flow block diagram is shown in Figure P1\u201311, where the x(n) input samples flow through the averager from left to right. Equation (P1\u20131) is equivalent to \\tag{P1-2} y(n) = \\frac{1}{5} x[n] + \\frac{1}{5} x[n - 1] + \\frac{1}{5} x[n - 2] + \\frac{1}{5} x[n - 3] + \\frac{1}{5} x[n - 4] =\\sum_{k = n-4}^{n} \\frac{x(k)}{5} . Answer: (a) Draw the block diagram of the discrete system described by Eq. (P1\u20132). Solution : skip. (b) The moving average processes described by Eqs. (P1\u20131) and (P1\u20132) have identical impulse responses. Draw that impulse response. Solution : # 1.12 n = np.arange(-5, 10); x = 0.0*n for i in range(5, 10): x[i] = 0.2 plt.xlabel('n'); plt.ylabel('y[n]'); plt.title(r'Plot of impulse response signal $y[n] = \\sum_{k = n-4}^{n} \\frac{x(k)}{5}$'); plt.stem(n, x); (c) If you had to implement (using programmable hardware or assembling discrete hardware components) either Eq. (P1\u20131) or Eq. (P1\u20132), which would you choose? Explain why. Solution : (P1-2) is better because mutipliers are always slow and expensive to implement. So we want to reduce the their numbers. 1.12 In this book we will look at many two-dimensional drawings showing the value of one variable (y) plotted as a function of another variable (x) . Stated in different words, we\u2019ll graphically display what are the values of a y axis variable for various values of an x axis variable. For example, Figure P1\u201312(a) plots the weight of a male child as a function of the child\u2019s age. The dimension of the x axis is years, and the dimension of the y axis is kilograms. What are the dimensions of the x and y axes of the familiar two-dimensional plot given in Figure P1\u201312(b)? Solution : The x axis is the time, the y axis is the frequency of the sound. 1.13 Let\u2019s say you are writing software code to generate an x(n) test sequence composed of the sum of two equal-amplitude discrete cosine waves, as x(n) = \\cos (2 \\pi f_o n t_s + \\phi ) + \\cos (2 \\pi f_o n t_s) where t_s is the time between your x(n) samples, and \u03c6 is a constant phase shift measured in radians. Using the trigonometric identity \\cos(\u03b1+\u03b2) + \\cos(\u03b1\u2013\u03b2) = 2 \\cos(\u03b1)\\cos(\u03b2) , derive an equation for x(n) that is of the form x(n) = 2 \\cos(\u03b1)\\cos(\u03b2) where variables \u03b1 and \u03b2 are in terms of 2\u03c0f_o n t_s and \u03c6 . Solution : \\begin{equation*} \\begin{cases} \u03b1 + \u03b2 &= 2 \\pi f_o n t_s + \\phi \\\\ \u03b1 - \u03b2 &= 2 \\pi f_o n t_s \\\\ \\end{cases} \\end{equation*} So \\begin{equation*} \\begin{cases} \u03b1 &= 2 \\pi f_o n t_s + \\frac{\\phi}{2} \\\\ \u03b2 &= \\frac{\\phi}{2} \\\\ \\end{cases} \\end{equation*} \\square 1.14 In your engineering education you\u2019ll often read in some mathematical derivation, or hear someone say, \u201cFor small \u03b1, \\sin(\u03b1) = \u03b1 .\u201d (In fact, you\u2019ll encounter that statement a few times in this book.) Draw two curves defined by x = \u03b1 \\text{ and } y = \\sin \u03b1 over the range of \u03b1 = \u2013\u03c0/2 to \u03b1 = \u03c0/2 , and discuss why that venerable \u201cFor small \u03b1, \\sin(\u03b1) = \u03b1 \u201d statement is valid. Solution : We can use L'hospital's rule \\lim_{\u03b1 \\to 0} \\frac{\\sin \u03b1}{\u03b1} = \\lim_{\u03b1 \\to 0} \\frac{\\cos \u03b1}{1} = 1 \\square 1.15 Considering two continuous (analog) sinusoids, having initial phase angles of \u03b1 radians at time t = 0 , replace the following \u201c?\u201d characters with the correct angle arguments: (a) \\sin (2 \\pi f_o t + \u03b1) = \\cos (?) . (b) \\cos (2 \\pi f_o t + \u03b1) = \\sin (?) . Solution : In general, \\sin (x) = \\cos (x - \u03c0/2) \\\\ \\cos (x) = \\sin (x + \u03c0/2) \\\\ So we have \\sin (2 \\pi f_o t + \u03b1) = \\cos (2 \\pi f_o t + \u03b1 - \u03c0/2) \\\\ \\cos (2 \\pi f_o t + \u03b1) = \\sin (2 \\pi f_o t + \u03b1 + \u03c0/2) \\\\ \\square 1.16 National Instruments Corp. manufactures an A/D converter, Model #NI USB-5133, that is capable of sampling an analog signal at an f_s sample rate of 100 megasamples per second (100 MHz). The A/D converter has internal memory that can store up to 4 \\times 10^6 discrete samples. What is the maximum number of cycles of a 25 MHz analog sinewave that can be stored in the A/D converter\u2019s memory? Show your work. Solution : In this problem, f_o = 25 MHz, and f_s = 100 MHz. N = 4 \\times 10^6 . \\sin (2 \\pi f_o N \\frac{1}{f_s}) \\\\ = \\sin (2 \\pi 10^6) So the maximum number of cycles is 10^6 . \\square 1.17 In the first part of the text\u2019s Section 1.5 we stated that for a process (or system) to be linear it must satisfy a scaling property that we called the proportionality characteristic in the text\u2019s Eq. (1\u201314). Determine if the following processes have that proportionality characteristic: (a) y_a(n) = x(n-1) / 6 (b) y_b(n) = 3 + x(n) (c) y_c(n) = \\sin [x(n)] Solution : (a) yes, (b)(c) no. 1.18 There is an often-used process in DSP called decimation , and in that process we retain some samples of an x(n) input sequence and discard other x(n) samples. Decimation by a factor of two can be described algebraically by \\tag{P1-3} y(m) = x(2n) where index m=0,1,2,3, \\dots The decimation defined by Eq. (P1\u20133) means that y(m) is equal to alternate samples (every other sample) of x(n) . For example: y(0) = x(0), y(1) = x(2), y(2) = x(4), y(3) = x(6), \\dots and so on. Here is the question: Is that decimation process time invariant? Illustrate your answer by decimating a simple sinusoidal x(n) time-domain sequence by a factor of two to obtain y(m) . Next, create a shifted-by-one-sample version of x(n) and call it x_{\\text{shift}}(n) . That new sequence is defined by \\tag{P1-4} x_{\\text{shift}}(n) = x(n+1) Finally, decimate x_{\\text{shift}}(n) according to Eq. (P1\u20133) to obtain y_{\\text{shift}}(n) . The decimation process is time invariant if y_{\\text{shift}}(n) is equal to a time-shifted version of y(m) . That is, decimation is time invariant if y_{\\text{shift}}(m) = y(m+1) Solution : The answer is no. Consider we have a 1 MHz sine wave \\sin(2 \\pi t) , and our sampling frequency is 4 MHz, so we have x(n) = \\sin (\\frac{\\pi}{2} n) Then we can see y(n) = 0 . x_{\\text{shift}}(n) = x(n+1) = \\sin (\\frac{\\pi}{2} (n+1)) So y_{\\text{shift}}(n) = (-1)^n \\neq y(n+1) = 0 So the decimation process is not time invariant. \\square 1.19 In Section 1.7 of the text we discussed the commutative property of linear time-invariant systems. The two networks in Figure P1\u201319 exhibit that property. Prove this to be true by showing that, given the same x(n) input sequence, outputs y_1(n) and y_2(n) will be equal. Solution : (a) z(n) = A x(n) \\\\ y_1(n) = z(n) + B z(n-1) = A x(n) + B A x(n-1) \\square (b) w(n) = x(n) + B x(n-1) \\\\ y_2(n) = A w(n) = A x(n) + AB x(n-1) So y_1(n) = y_2(n) . \\square 1.20 Here we investigate several simple discrete processes that turn out to be useful in a number of DSP applications. Draw the block diagrams, showing their inputs as x(n) , of the processes described by the following difference equations: (a) a 4th-order comb filter: y_C(n) = x(n) \u2013 x(n\u20134) , (b) an integrator: y_I(n) = x(n) + y_I(n\u20131) , (c) a leaky integrator: y_{\\text{LI}}(n) = Ax(n) + (1\u2013A)y_{\\text{LI}}(n\u20131) [the scalar value A is a real-valued constant in the range 0 <A<1 ]. (d) a differentiator: y_D(n) = 0.5x(n) - 0.5x(n-2) 1.21 Draw the unit impulse responses (the output sequences when the input is a unit sample impulse applied at time n=0 ) of the four processes listed in Problem 1.20. Let A = 0.5 for the leaky integrator. Assume that all sample values within the systems are zero at time n = 0 . (a) (b) (c) (d) 1.22 DSP engineers involved in building control systems often need to know what is the step response of a discrete system. The step response, y_{\\text{step}}(n) , can be defined in two equivalent ways. One way is to say that y_{\\text{step}}(n) is a system\u2019s response to an input sequence of all unity-valued samples. A second definition is that y_{\\text{step}}(n) is the cumulative sum (the accumulation, discrete integration) of that system\u2019s unit impulse response y_{\\text{imp}}(n) . Algebraically, this second definition of step response is expressed as y_{\\text{step}}(n) = \\sum_{k = -\\infty }^{n} y_{\\text{imp}}(k) In words, the above y_{\\text{setp}}(n) expression tells us: \u201cThe step response at time index n is equal to the sum of all the previous impulse response samples up to and including y_{\\text{imp}}(k) .\" With that said, what are the step responses of the four processes listed in Problem 1.20? (Let A = 0.5 for the leaky integrator.) Assume that all sample values within the system are zero at time n=0 . (a) (b) (c) (d) 1.23 Thinking about the spectra of signals, the ideal continuous (analog) square-wave s(t) in Figure P1\u201323, whose fundamental frequency is f_o Hz, is equal to the sum of an f_o Hz sinewave and all sinewaves whose frequencies are odd multiples of f_o Hz. We call s(t) \u201cideal\u201d because we assume the amplitude tran- sitions from plus and minus A occur instantaneously (zero seconds!). Continuous Fourier analysis of the s(t) squarewave allows us to describe this sum of frequencies as the following infinite sum: s(t) = \\frac{4A}{\\pi } \\left[ \\sin (2 \\pi f_o t) + \\frac{6 \\pi f_o t}{3} + \\frac{10 \\pi f_o t}{5} + \\frac{14 \\pi f_o t}{7} + \\cdots \\right] Using a summation symbol, we can express squarewave s(t) algebraically as s(t) = \\frac{4A}{\\pi } \\sum_{n = 1}^{\\infty} \\sin (2 \\pi (2n-1) f_o t) / (2n-1) Answer: (a) Imagine applying s(t) to a filter that completely removes s(t) \u2019s lowest-frequency spectral component. Draw the time-domain waveform at the output of such a filter. Solution : Removing s(t) \u2019s lowest-frequency spectral component means s'(t) = \\frac{4A}{\\pi } \\sum_{n = 2}^{\\infty} \\sin (2 \\pi (2n-1) f_o t) / (2n-1) The code: # 1.23 t = np.arange(-2, 4, 0.01) A = 1 y = np.zeros_like(t) start = 3 end = 10 for k in range(start, end, 2): y = y + np.sin(2 * np.pi * k * t) / k y = 4 * A / (np.pi) * y plt.xlabel('t'); plt.ylabel(r'y'); plt.title(r'Plot of s(t) w/o lowest-freq. component.'); plt.plot(t, y); (b) Assume s(t) represents a voltage whose fo fundamental frequency is 1 Hz, and we wish to amplify that voltage to peak amplitudes of \u00b12A. Over what frequency range must an amplifier operate (that is, what must be the amplifier\u2019s passband width) in order to exactly double the ideal 1 Hz squarewave\u2019s peak-peak amplitude? Solution : Since the ideal squarewave has frequency components for 1, 2, \\cdots, N, \\cdots Hz, then the passband width has to be infinite. \\square 1.24 This interesting problem illustrates an illegal mathematical operation that we must learn to avoid in our future algebraic activities. The following claims to be a mathematical proof that 4 = 5 . Which of the following steps is illegal? Explain why. Proof that 4 = 5 : Step 1: 16 \u2013 36 = 25 \u2013 45 Step 2: 42 \u2013 9 \u00b7 4 = 52 \u2013 9 \u00b7 5 Step 3: 42 \u2013 9 \u00b7 4 + 81/4 = 52 \u2013 9 \u00b7 5 + 81/4 Step 4: (4 \u2013 9/2)^2 = (5 \u2013 9/2)^2 Step 5: 4 \u2013 9/2 = 5 \u2013 9/2 Step 6: 4 = 5 Solution : From step 4 to step 5 is illegal. In general, if r^2 = s^2 , it's possible that r = -s . \\square","title":"Understanding DSP Chapter 01 exercises"},{"location":"udsp01ex/#chapter-01-discrete-sequences-and-systems","text":"","title":"Chapter 01 Discrete Sequences and Systems"},{"location":"udsp01ex/#11","text":"This problem gives us practice in thinking about sequences of numbers. For centuries mathematicians have developed clever ways of computing \u03c0 . In 1671 the Scottish mathematician James Gregory proposed the following very simple series for calculating \u03c0 : \u03c0 = 4 \\cdot \\left\\{ 1 - \\frac{1}{3} + \\frac{1}{5} - \\frac{1}{7} + \\cdots \\right\\} Thinking of the terms inside the parentheses as a sequence indexed by the variable n , where n = 0, 1, 2, 3, . . ., 100 , write Gregory\u2019s algorithm in the form \u03c0 = 4 \\cdot \\sum_{n = 0}^{100} (-1)^? ? replacing the \u201c?\u201d characters with expressions in terms of index n . Solution : \u03c0 = 4 \\cdot \\sum_{n = 0}^{100} (-1)^n \\frac{1}{2n+1} \\square","title":"1.1"},{"location":"udsp01ex/#12","text":"One of the ways to obtain discrete sequences, for follow-on processing, is to digitize a continuous (analog) signal with an analog-to-digital (A/D) con- verter. A 6-bit A/D converter\u2019s output words (6-bit binary words) can only represent 26=64 different numbers. (We cover this digitization, sampling, and A/D converters in detail in upcoming chapters.) Thus we say the A/D converter\u2019s \u201cdigital\u201d output can only represent a finite number of amplitude values. Can you think of a continuous time-domain electrical signal that only has a finite number of amplitude values? If so, draw a graph of that continuous-time signal. Solution : Maybe a electrical piano.","title":"1.2"},{"location":"udsp01ex/#13","text":"On the Internet, the author once encountered the following line of C-language code PI = 2 * asin(1.0) whose purpose was to define the constant \u03c0 . In standard mathematical notation, that line of code can be described by \u03c0 = \\sin ^{-1} (1.0) Under what assumption does the above expression correctly define the constant \u03c0 ? Solution : The assumption should be we have infinite precision.","title":"1.3"},{"location":"udsp01ex/#14","text":"Many times in the literature of signal processing you will encounter the identity x^0 = 1 That is, x raised to the zero power is equal to one. Using the Laws of Exponents, prove the above expression to be true. Proof : 1 = x^1 x^{-1} = x^{1 + (-1)} = x^0 \\square","title":"1.4"},{"location":"udsp01ex/#15","text":"Recall that for discrete sequences the t_s sample period (the time period between samples) is the reciprocal of the sample frequency f_s . Write the equations, as we did in the text\u2019s Eq. (1\u20133) , describing time-domain sequences for unity-amplitude cosine waves whose f_o frequencies are (a) f_o = f_s / 2 , one-half the sample rate. Solution : x(n) = \\cos 2 \\pi f_o n t_s \\\\ = \\cos 2 \\pi (f_s / 2) n (1 / f_s) \\\\ = \\cos n \\pi = (-1)^n \\square (b) f_o = f_s / 4 , one-fourth the sample rate. Solution : x(n) = \\cos 2 \\pi f_o n t_s \\\\ = \\cos 2 \\pi (f_s / 4) n (1 / f_s) \\\\ = \\cos \\frac{n}{2} \\pi \\square (c) f_o = 0 (zero) Hz Solution : x(n) = \\cos 2 \\pi f_o n t_s = \\cos 0 = 1 \\square","title":"1.5"},{"location":"udsp01ex/#16","text":"Draw the three time-domain cosine wave sequences, where a sample value is represented by a dot, described in Problem 1.5. The correct solution to Part (a) of this problem is a useful sequence used to convert some lowpass digital filters into highpass filters. (Chapter 5 discusses that topic.) The correct solution to Part (b) of this problem is an important discrete sequence used for frequency translation (both for signal down-conversion and up-conversion) in modern-day wireless communications systems. The correct solution to Part (c) of this problem should convince us that it\u2019s perfectly valid to describe a cosine sequence whose frequency is zero Hz. Solution import numpy as np import matplotlib.pyplot as plt # 1.6.(a) n = np.arange(10); fs = 2.0 fo = fs / 2.0 ts = 1.0 / fs x = np.cos(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\cos (2\\pi 1.0 n \\Delta t)$'); plt.stem(n, x); # 1.6.(b) n = np.arange(10); fs = 2.0 fo = fs / 4.0 ts = 1.0 / fs x = np.cos(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\cos (2\\pi 0.5 n \\Delta t)$'); plt.stem(n, x); # 1.6.(c) n = np.arange(10); fs = 2.0 fo = 0 ts = 1.0 / fs x = np.cos(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\cos (2\\pi 0 n t_s)$'); plt.stem(n, x);","title":"1.6"},{"location":"udsp01ex/#17","text":"Draw the three time-domain sequences of unity-amplitude sinewaves (not cosine waves) whose frequencies are (a) f_o = f_s / 2 , one-half the sample rate. (b) f_o = f_s / 4 , one-fourth the sample rate. (c) f_o = 0 (zero) Hz The correct solutions to Parts (a) and (c) show us that the two frequencies, 0 Hz and fs/2 Hz, are special frequencies in the world of discrete signal processing. What is special about the sinewave sequences obtained from the above Parts (a) and (c)? Solution : # 1.7.(a) n = np.arange(10); fs = 2.0 fo = fs / 2.0 ts = 1.0 / fs x = np.sin(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\sin (2\\pi 1.0 n 0.5)$'); plt.stem(n, x); plt.ylim(-1, 1) # 1.7.(b) n = np.arange(10); fs = 2.0 fo = fs / 4.0 ts = 1.0 / fs x = np.sin(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\sin (2\\pi 2.0 n 0.5)$'); plt.stem(n, x); # 1.7.(c) n = np.arange(10); fs = 2.0 fo = 0 ts = 1.0 / fs x = np.sin(2 * np.pi * fo * n * ts) plt.xlabel('n'); plt.ylabel('x[n]'); plt.title(r'Plot of DT signal $x[n] = \\sin (2\\pi 0.0 n 0.5)$'); plt.stem(n, x); Part (a) and (c) are special because they sampled all 0.","title":"1.7"},{"location":"udsp01ex/#18","text":"Consider the infinite-length time-domain sequence x(n) in Figure P1\u20138. Draw the first eight samples of a shifted time sequence defined by x_{shift}(n) = x(n+1) # 1.8 n = np.arange(7); nz = np.arange(0, 7, 0.01); fs = 4 fo = 1 ts = 1.0 / fs x = -np.sin(2 * np.pi * fo * n * ts) z = -np.sin(2 * np.pi * fo * nz * ts) plt.xlabel('n'); plt.ylabel('$x_{shift}[n]$'); plt.title(r'Plot of DT signal $x[n] = \\sin (2\\pi 1.0 n 0.25)$'); plt.plot(n, x, 'o'); plt.plot(nz, z, '--'); plt.show()","title":"1.8"},{"location":"udsp01ex/#19","text":"Assume, during your reading of the literature of DSP, you encounter the process shown in Figure P1\u20139. The x(n) input sequence, whose f_s sample rate is 2500 Hz, is multiplied by a sinusoidal m(n) sequence to produce the y(n) output sequence. What is the frequency, measured in Hz, of the sinusoidal m(n) sequence? Solution : Assume m(n) = \\sin (2 \\pi f_o n t_s) Then we know 2 \\pi f_o n t_s = 0.8 \\pi n \\\\ \\Rightarrow \\\\ f_o = 0.4 f_s = 1000","title":"1.9"},{"location":"udsp01ex/#110","text":"There is a process in DSP called an \u201cN-point running sum\u201d (a kind of digital lowpass filter, actually) that is described by the following equation: y(n) = \\sum_{p = 0}^{N - 1} x(n-p) Write out, giving the indices of all the x() terms, the algebraic expression that describes the computations needed to compute y(9) when N=6 . Solution : y(9) = x(9) + x(8) + x(7) + x(6) + x(5) + x(4) \\square","title":"1.10"},{"location":"udsp01ex/#111","text":"A 5-point moving averager can be described by the following difference equation: \\tag{P1-1} y(n) = \\frac{1}{5} [x(n) + x(n-1) + x(n-2) + x(n-3) + x(n-4)] = \\frac{1}{5} \\sum_{k = n-4}^{n} x(k) The averager\u2019s signal-flow block diagram is shown in Figure P1\u201311, where the x(n) input samples flow through the averager from left to right. Equation (P1\u20131) is equivalent to \\tag{P1-2} y(n) = \\frac{1}{5} x[n] + \\frac{1}{5} x[n - 1] + \\frac{1}{5} x[n - 2] + \\frac{1}{5} x[n - 3] + \\frac{1}{5} x[n - 4] =\\sum_{k = n-4}^{n} \\frac{x(k)}{5} . Answer: (a) Draw the block diagram of the discrete system described by Eq. (P1\u20132). Solution : skip. (b) The moving average processes described by Eqs. (P1\u20131) and (P1\u20132) have identical impulse responses. Draw that impulse response. Solution : # 1.12 n = np.arange(-5, 10); x = 0.0*n for i in range(5, 10): x[i] = 0.2 plt.xlabel('n'); plt.ylabel('y[n]'); plt.title(r'Plot of impulse response signal $y[n] = \\sum_{k = n-4}^{n} \\frac{x(k)}{5}$'); plt.stem(n, x); (c) If you had to implement (using programmable hardware or assembling discrete hardware components) either Eq. (P1\u20131) or Eq. (P1\u20132), which would you choose? Explain why. Solution : (P1-2) is better because mutipliers are always slow and expensive to implement. So we want to reduce the their numbers.","title":"1.11"},{"location":"udsp01ex/#112","text":"In this book we will look at many two-dimensional drawings showing the value of one variable (y) plotted as a function of another variable (x) . Stated in different words, we\u2019ll graphically display what are the values of a y axis variable for various values of an x axis variable. For example, Figure P1\u201312(a) plots the weight of a male child as a function of the child\u2019s age. The dimension of the x axis is years, and the dimension of the y axis is kilograms. What are the dimensions of the x and y axes of the familiar two-dimensional plot given in Figure P1\u201312(b)? Solution : The x axis is the time, the y axis is the frequency of the sound.","title":"1.12"},{"location":"udsp01ex/#113","text":"Let\u2019s say you are writing software code to generate an x(n) test sequence composed of the sum of two equal-amplitude discrete cosine waves, as x(n) = \\cos (2 \\pi f_o n t_s + \\phi ) + \\cos (2 \\pi f_o n t_s) where t_s is the time between your x(n) samples, and \u03c6 is a constant phase shift measured in radians. Using the trigonometric identity \\cos(\u03b1+\u03b2) + \\cos(\u03b1\u2013\u03b2) = 2 \\cos(\u03b1)\\cos(\u03b2) , derive an equation for x(n) that is of the form x(n) = 2 \\cos(\u03b1)\\cos(\u03b2) where variables \u03b1 and \u03b2 are in terms of 2\u03c0f_o n t_s and \u03c6 . Solution : \\begin{equation*} \\begin{cases} \u03b1 + \u03b2 &= 2 \\pi f_o n t_s + \\phi \\\\ \u03b1 - \u03b2 &= 2 \\pi f_o n t_s \\\\ \\end{cases} \\end{equation*} So \\begin{equation*} \\begin{cases} \u03b1 &= 2 \\pi f_o n t_s + \\frac{\\phi}{2} \\\\ \u03b2 &= \\frac{\\phi}{2} \\\\ \\end{cases} \\end{equation*} \\square","title":"1.13"},{"location":"udsp01ex/#114","text":"In your engineering education you\u2019ll often read in some mathematical derivation, or hear someone say, \u201cFor small \u03b1, \\sin(\u03b1) = \u03b1 .\u201d (In fact, you\u2019ll encounter that statement a few times in this book.) Draw two curves defined by x = \u03b1 \\text{ and } y = \\sin \u03b1 over the range of \u03b1 = \u2013\u03c0/2 to \u03b1 = \u03c0/2 , and discuss why that venerable \u201cFor small \u03b1, \\sin(\u03b1) = \u03b1 \u201d statement is valid. Solution : We can use L'hospital's rule \\lim_{\u03b1 \\to 0} \\frac{\\sin \u03b1}{\u03b1} = \\lim_{\u03b1 \\to 0} \\frac{\\cos \u03b1}{1} = 1 \\square","title":"1.14"},{"location":"udsp01ex/#115","text":"Considering two continuous (analog) sinusoids, having initial phase angles of \u03b1 radians at time t = 0 , replace the following \u201c?\u201d characters with the correct angle arguments: (a) \\sin (2 \\pi f_o t + \u03b1) = \\cos (?) . (b) \\cos (2 \\pi f_o t + \u03b1) = \\sin (?) . Solution : In general, \\sin (x) = \\cos (x - \u03c0/2) \\\\ \\cos (x) = \\sin (x + \u03c0/2) \\\\ So we have \\sin (2 \\pi f_o t + \u03b1) = \\cos (2 \\pi f_o t + \u03b1 - \u03c0/2) \\\\ \\cos (2 \\pi f_o t + \u03b1) = \\sin (2 \\pi f_o t + \u03b1 + \u03c0/2) \\\\ \\square","title":"1.15"},{"location":"udsp01ex/#116","text":"National Instruments Corp. manufactures an A/D converter, Model #NI USB-5133, that is capable of sampling an analog signal at an f_s sample rate of 100 megasamples per second (100 MHz). The A/D converter has internal memory that can store up to 4 \\times 10^6 discrete samples. What is the maximum number of cycles of a 25 MHz analog sinewave that can be stored in the A/D converter\u2019s memory? Show your work. Solution : In this problem, f_o = 25 MHz, and f_s = 100 MHz. N = 4 \\times 10^6 . \\sin (2 \\pi f_o N \\frac{1}{f_s}) \\\\ = \\sin (2 \\pi 10^6) So the maximum number of cycles is 10^6 . \\square","title":"1.16"},{"location":"udsp01ex/#117","text":"In the first part of the text\u2019s Section 1.5 we stated that for a process (or system) to be linear it must satisfy a scaling property that we called the proportionality characteristic in the text\u2019s Eq. (1\u201314). Determine if the following processes have that proportionality characteristic: (a) y_a(n) = x(n-1) / 6 (b) y_b(n) = 3 + x(n) (c) y_c(n) = \\sin [x(n)] Solution : (a) yes, (b)(c) no.","title":"1.17"},{"location":"udsp01ex/#118","text":"There is an often-used process in DSP called decimation , and in that process we retain some samples of an x(n) input sequence and discard other x(n) samples. Decimation by a factor of two can be described algebraically by \\tag{P1-3} y(m) = x(2n) where index m=0,1,2,3, \\dots The decimation defined by Eq. (P1\u20133) means that y(m) is equal to alternate samples (every other sample) of x(n) . For example: y(0) = x(0), y(1) = x(2), y(2) = x(4), y(3) = x(6), \\dots and so on. Here is the question: Is that decimation process time invariant? Illustrate your answer by decimating a simple sinusoidal x(n) time-domain sequence by a factor of two to obtain y(m) . Next, create a shifted-by-one-sample version of x(n) and call it x_{\\text{shift}}(n) . That new sequence is defined by \\tag{P1-4} x_{\\text{shift}}(n) = x(n+1) Finally, decimate x_{\\text{shift}}(n) according to Eq. (P1\u20133) to obtain y_{\\text{shift}}(n) . The decimation process is time invariant if y_{\\text{shift}}(n) is equal to a time-shifted version of y(m) . That is, decimation is time invariant if y_{\\text{shift}}(m) = y(m+1) Solution : The answer is no. Consider we have a 1 MHz sine wave \\sin(2 \\pi t) , and our sampling frequency is 4 MHz, so we have x(n) = \\sin (\\frac{\\pi}{2} n) Then we can see y(n) = 0 . x_{\\text{shift}}(n) = x(n+1) = \\sin (\\frac{\\pi}{2} (n+1)) So y_{\\text{shift}}(n) = (-1)^n \\neq y(n+1) = 0 So the decimation process is not time invariant. \\square","title":"1.18"},{"location":"udsp01ex/#119","text":"In Section 1.7 of the text we discussed the commutative property of linear time-invariant systems. The two networks in Figure P1\u201319 exhibit that property. Prove this to be true by showing that, given the same x(n) input sequence, outputs y_1(n) and y_2(n) will be equal. Solution : (a) z(n) = A x(n) \\\\ y_1(n) = z(n) + B z(n-1) = A x(n) + B A x(n-1) \\square (b) w(n) = x(n) + B x(n-1) \\\\ y_2(n) = A w(n) = A x(n) + AB x(n-1) So y_1(n) = y_2(n) . \\square","title":"1.19"},{"location":"udsp01ex/#120","text":"Here we investigate several simple discrete processes that turn out to be useful in a number of DSP applications. Draw the block diagrams, showing their inputs as x(n) , of the processes described by the following difference equations: (a) a 4th-order comb filter: y_C(n) = x(n) \u2013 x(n\u20134) , (b) an integrator: y_I(n) = x(n) + y_I(n\u20131) , (c) a leaky integrator: y_{\\text{LI}}(n) = Ax(n) + (1\u2013A)y_{\\text{LI}}(n\u20131) [the scalar value A is a real-valued constant in the range 0 <A<1 ]. (d) a differentiator: y_D(n) = 0.5x(n) - 0.5x(n-2)","title":"1.20"},{"location":"udsp01ex/#121","text":"Draw the unit impulse responses (the output sequences when the input is a unit sample impulse applied at time n=0 ) of the four processes listed in Problem 1.20. Let A = 0.5 for the leaky integrator. Assume that all sample values within the systems are zero at time n = 0 . (a) (b) (c) (d)","title":"1.21"},{"location":"udsp01ex/#122","text":"DSP engineers involved in building control systems often need to know what is the step response of a discrete system. The step response, y_{\\text{step}}(n) , can be defined in two equivalent ways. One way is to say that y_{\\text{step}}(n) is a system\u2019s response to an input sequence of all unity-valued samples. A second definition is that y_{\\text{step}}(n) is the cumulative sum (the accumulation, discrete integration) of that system\u2019s unit impulse response y_{\\text{imp}}(n) . Algebraically, this second definition of step response is expressed as y_{\\text{step}}(n) = \\sum_{k = -\\infty }^{n} y_{\\text{imp}}(k) In words, the above y_{\\text{setp}}(n) expression tells us: \u201cThe step response at time index n is equal to the sum of all the previous impulse response samples up to and including y_{\\text{imp}}(k) .\" With that said, what are the step responses of the four processes listed in Problem 1.20? (Let A = 0.5 for the leaky integrator.) Assume that all sample values within the system are zero at time n=0 . (a) (b) (c) (d)","title":"1.22"},{"location":"udsp01ex/#123","text":"Thinking about the spectra of signals, the ideal continuous (analog) square-wave s(t) in Figure P1\u201323, whose fundamental frequency is f_o Hz, is equal to the sum of an f_o Hz sinewave and all sinewaves whose frequencies are odd multiples of f_o Hz. We call s(t) \u201cideal\u201d because we assume the amplitude tran- sitions from plus and minus A occur instantaneously (zero seconds!). Continuous Fourier analysis of the s(t) squarewave allows us to describe this sum of frequencies as the following infinite sum: s(t) = \\frac{4A}{\\pi } \\left[ \\sin (2 \\pi f_o t) + \\frac{6 \\pi f_o t}{3} + \\frac{10 \\pi f_o t}{5} + \\frac{14 \\pi f_o t}{7} + \\cdots \\right] Using a summation symbol, we can express squarewave s(t) algebraically as s(t) = \\frac{4A}{\\pi } \\sum_{n = 1}^{\\infty} \\sin (2 \\pi (2n-1) f_o t) / (2n-1) Answer: (a) Imagine applying s(t) to a filter that completely removes s(t) \u2019s lowest-frequency spectral component. Draw the time-domain waveform at the output of such a filter. Solution : Removing s(t) \u2019s lowest-frequency spectral component means s'(t) = \\frac{4A}{\\pi } \\sum_{n = 2}^{\\infty} \\sin (2 \\pi (2n-1) f_o t) / (2n-1) The code: # 1.23 t = np.arange(-2, 4, 0.01) A = 1 y = np.zeros_like(t) start = 3 end = 10 for k in range(start, end, 2): y = y + np.sin(2 * np.pi * k * t) / k y = 4 * A / (np.pi) * y plt.xlabel('t'); plt.ylabel(r'y'); plt.title(r'Plot of s(t) w/o lowest-freq. component.'); plt.plot(t, y); (b) Assume s(t) represents a voltage whose fo fundamental frequency is 1 Hz, and we wish to amplify that voltage to peak amplitudes of \u00b12A. Over what frequency range must an amplifier operate (that is, what must be the amplifier\u2019s passband width) in order to exactly double the ideal 1 Hz squarewave\u2019s peak-peak amplitude? Solution : Since the ideal squarewave has frequency components for 1, 2, \\cdots, N, \\cdots Hz, then the passband width has to be infinite. \\square","title":"1.23"},{"location":"udsp01ex/#124","text":"This interesting problem illustrates an illegal mathematical operation that we must learn to avoid in our future algebraic activities. The following claims to be a mathematical proof that 4 = 5 . Which of the following steps is illegal? Explain why. Proof that 4 = 5 : Step 1: 16 \u2013 36 = 25 \u2013 45 Step 2: 42 \u2013 9 \u00b7 4 = 52 \u2013 9 \u00b7 5 Step 3: 42 \u2013 9 \u00b7 4 + 81/4 = 52 \u2013 9 \u00b7 5 + 81/4 Step 4: (4 \u2013 9/2)^2 = (5 \u2013 9/2)^2 Step 5: 4 \u2013 9/2 = 5 \u2013 9/2 Step 6: 4 = 5 Solution : From step 4 to step 5 is illegal. In general, if r^2 = s^2 , it's possible that r = -s . \\square","title":"1.24"},{"location":"udsp02/","text":"Chapter 02 Periodic Sampling Our primary concern is just how fast a given continuous signal must be sampled in order to preserve its information content. 2.1 ALIASING: SIGNAL AMBIGUITY IN THE FREQUENCY DOMAIN If a signal can be defined by \\tag{2-1} x(t) = \\sin (2 \\pi f_o t) and \\tag{2-2} x(n) = \\sin (2 \\pi f_o n t_s) Then we can have \\tag{2-3} x(n) = \\sin (2 \\pi f_o n t_s) = \\sin (2 \\pi f_o n t_s + 2 \\pi m) = \\sin (2 \\pi (f_o + \\frac{m}{n t_s}) n t_s ) So if we consider a sine wave with frequency of f_o + k f_s, k \\in \\mathbb{Z} , then \\tag{2-5} x'(n) = \\sin (2 \\pi (f_o + k f_s) t_s) = \\sin (2 \\pi f_o n t_s + 2 \\pi k) = \\sin (2 \\pi f_o n t_s) = x(n) When sampling at a rate of f_s samples/second, if k is any positive or negative integer, we cannot distinguish between the sampled values of a sinewave of f_o Hz and a sinewave of (f_o + kf_s) Hz. The frequency f_s / 2 is an important quantity in sampling theory and is referred to by different names in the literature, such as critical Nyquist, half Nyquist, and folding frequency. 2.2 SAMPLING LOWPASS SIGNALS If we reduce the f_s = 1.5 B < 2 B , the we see the lower edge and upper edge of the spectral replications centered at +f_s and \u2013f_s now lie in our band of interest. The spectral information in the bands of \u2013B to \u2013B/2 and B/2 to B Hz has been corrupted. The entire spectral content of the original continuous signal is now residing in the band of interest between \u2013f_s/2 and +f_s/2 . This key property was true in Figure 2\u20134(b) and will always be true, regardless of the original signal or the sample rate. This problem is solved in practice by using an analog low-pass anti-aliasing filter prior to A/D conversion to attenuate any unwanted signal energy above +B and below \u2013B Hz as shown in Figure 2\u20136. 2.3 SAMPLING BANDPASS SIGNALS Use the following figure, we can derive the relation between f_s and f_c . From (a) it's 2 f_c - B = m f_s From (b) it's 2 f_c + B = (m + 1) f_s And also f_s \\geq 2B , so overall \\frac{2 f_c + B}{m + 1} \\leq f_s \\leq \\frac{2 f_c - B}{m} The figure 2-9 is interesting. 2.4 PRACTICAL ASPECTS OF BANDPASS SAMPLING","title":"Understanding DSP Chapter 02"},{"location":"udsp02/#chapter-02-periodic-sampling","text":"Our primary concern is just how fast a given continuous signal must be sampled in order to preserve its information content.","title":"Chapter 02 Periodic Sampling"},{"location":"udsp02/#21-aliasing-signal-ambiguity-in-the-frequency-domain","text":"If a signal can be defined by \\tag{2-1} x(t) = \\sin (2 \\pi f_o t) and \\tag{2-2} x(n) = \\sin (2 \\pi f_o n t_s) Then we can have \\tag{2-3} x(n) = \\sin (2 \\pi f_o n t_s) = \\sin (2 \\pi f_o n t_s + 2 \\pi m) = \\sin (2 \\pi (f_o + \\frac{m}{n t_s}) n t_s ) So if we consider a sine wave with frequency of f_o + k f_s, k \\in \\mathbb{Z} , then \\tag{2-5} x'(n) = \\sin (2 \\pi (f_o + k f_s) t_s) = \\sin (2 \\pi f_o n t_s + 2 \\pi k) = \\sin (2 \\pi f_o n t_s) = x(n) When sampling at a rate of f_s samples/second, if k is any positive or negative integer, we cannot distinguish between the sampled values of a sinewave of f_o Hz and a sinewave of (f_o + kf_s) Hz. The frequency f_s / 2 is an important quantity in sampling theory and is referred to by different names in the literature, such as critical Nyquist, half Nyquist, and folding frequency.","title":"2.1 ALIASING: SIGNAL AMBIGUITY IN THE FREQUENCY DOMAIN"},{"location":"udsp02/#22-sampling-lowpass-signals","text":"If we reduce the f_s = 1.5 B < 2 B , the we see the lower edge and upper edge of the spectral replications centered at +f_s and \u2013f_s now lie in our band of interest. The spectral information in the bands of \u2013B to \u2013B/2 and B/2 to B Hz has been corrupted. The entire spectral content of the original continuous signal is now residing in the band of interest between \u2013f_s/2 and +f_s/2 . This key property was true in Figure 2\u20134(b) and will always be true, regardless of the original signal or the sample rate. This problem is solved in practice by using an analog low-pass anti-aliasing filter prior to A/D conversion to attenuate any unwanted signal energy above +B and below \u2013B Hz as shown in Figure 2\u20136.","title":"2.2 SAMPLING LOWPASS SIGNALS"},{"location":"udsp02/#23-sampling-bandpass-signals","text":"Use the following figure, we can derive the relation between f_s and f_c . From (a) it's 2 f_c - B = m f_s From (b) it's 2 f_c + B = (m + 1) f_s And also f_s \\geq 2B , so overall \\frac{2 f_c + B}{m + 1} \\leq f_s \\leq \\frac{2 f_c - B}{m} The figure 2-9 is interesting.","title":"2.3 SAMPLING BANDPASS SIGNALS"},{"location":"udsp02/#24-practical-aspects-of-bandpass-sampling","text":"","title":"2.4 PRACTICAL ASPECTS OF BANDPASS SAMPLING"},{"location":"udsp02ex/","text":"Chapter 02 Periodic Sampling 2.1 Suppose you have a mechanical clock that has a minute hand, but no hour hand. Next, suppose you took a photograph of the clock when the minute hand was pointed at 12:00 noon and then took additional photos every 55 minutes. Upon showing those photos, in time order, to someone: (a) What would that person think about the direction of motion of the minute hand as time advances? Solution : He or she will think it is going counter-clock wise (b) With the idea of lowpass sampling in mind, how often would you need to take photos, measured in photos/hour, so that the successive photos show proper (true) clockwise minute-hand rotation? Solution : He or she just needs to take photos > photos/hour. Since we need to have f_s > 2 B . \\square 2.2 Assume we sampled a continuous x(t) signal and obtained 100 x(n) time- domain samples. What important information (parameter that we need to know in order to analyze x(t) ) is missing from the x(n) sequence? Solution : The frequency of x(t) is missing. \\square 2.3 National Instruments Corporation produces an analog-to-digital (A/D) converter (Model #NI-5154) that can sample (digitize) an analog signal at a sample rate of fs=2.0 GHz (gigahertz). (a) What is the t_s period of the output samples of such a device? Solution : The t_s = 500 \\text{ ps} . (b) Each A/D output sample is an 8-bit binary word (one byte), and the converter is able to store 256 million samples. What is the maximum time interval over which the converter can continuously sample an analog signal? Solution : It can sample 2 \\times 10^9 samples per second. Then it can only sample for \\frac{256 \\cdot 10^6}{2 \\times 10^9} = 0.128 \\text{ second} \\square 2.4 Consider a continuous time-domain sinewave, whose cyclic frequency is 500 Hz, defined by x(t) = \\cos [2 \\pi (500) t + \\pi / 7] Write the equation for the discrete x(n) sinewave sequence that results from sampling x(t) at an f_s sample rate of 4000 Hz. Solution : f_o = 500, f_s = 4000 , so t_s = 1/4000 . Then x(n) = \\cos [2 \\pi \\frac{n}{8} + \\pi / 7] \\square 2.5 If we sampled a single continuous sinewave whose frequency is f_o Hz, over what range must t_s (the time between digital samples) be to satisfy the Nyquist criterion? Express that t_s range in terms of f_o . Solution : We need to have f_s \\geq 2 f_o , i.e. \\frac{1}{t_s} \\geq 2 f_o . So t_s \\leq \\frac{1}{2 f_o} \\square 2.6 Suppose we used the following statement to describe the Nyquist criterion for lowpass sampling: \u201cWhen sampling a single continuous sinusoid (a single analog tone), we must obtain no fewer than N discrete samples per continu- ous sinewave cycle.\u201d What is the value of this integer N ? Solution N = 2 . \\square 2.7 The Nyquist criterion, regarding the sampling of lowpass signals, is sometimes stated as \u201cThe sampling rate fs must be equal to, or greater than, twice the highest spectral component of the continuous signal being sampled.\u201d Can you think of how a continuous sinusoidal signal can be sampled in accordance with that Nyquist criterion definition to yield all zero-valued discrete samples? Solution : Consider x(t) = \\sin 2 \\pi \\frac{f_s}{2} t Then x(n) = \\sin 2 \\pi \\frac{f_s}{2} n \\frac{1}{f_s} = \\sin n \\pi = 0 \\square 2.8 Stock market analysts study time-domain charts (plots) of the closing price of stock shares. A typical plot takes the form of that in Figure P2\u20138, where in- stead of plotting discrete closing price sample values as dots, they draw straight lines connecting the closing price value samples. What is the t_s period for such stock market charts? Solution : The t_s is one day, 24 hours. \\square 2.9 Consider a continuous time-domain sinewave defined by x(t) = \\cos (4000 \\pi t) that was sampled to produce the discrete sinewave sequence defined by x(n) = \\cos (n \\pi / 2) What is the f_s sample rate, measured in Hz, that would result in sequence x(n) ? Solution : x(t) = \\cos (2 f_o \\pi t) = \\cos (4000 \\pi t) , so f_o = 2000 Hz. Then x(n) = \\cos 2 \\pi f_o n \\frac{1}{f_s} = \\cos 4000 \\pi n \\frac{1}{f_s} So 4000 \\pi n \\frac{1}{f_s} = n \\pi / 2 \\\\ \\Rightarrow f_s = 8000 \\text{ Hz} \\square","title":"Understanding DSP Chapter 02 exercises"},{"location":"udsp02ex/#chapter-02-periodic-sampling","text":"","title":"Chapter 02 Periodic Sampling"},{"location":"udsp02ex/#21","text":"Suppose you have a mechanical clock that has a minute hand, but no hour hand. Next, suppose you took a photograph of the clock when the minute hand was pointed at 12:00 noon and then took additional photos every 55 minutes. Upon showing those photos, in time order, to someone: (a) What would that person think about the direction of motion of the minute hand as time advances? Solution : He or she will think it is going counter-clock wise (b) With the idea of lowpass sampling in mind, how often would you need to take photos, measured in photos/hour, so that the successive photos show proper (true) clockwise minute-hand rotation? Solution : He or she just needs to take photos > photos/hour. Since we need to have f_s > 2 B . \\square","title":"2.1"},{"location":"udsp02ex/#22","text":"Assume we sampled a continuous x(t) signal and obtained 100 x(n) time- domain samples. What important information (parameter that we need to know in order to analyze x(t) ) is missing from the x(n) sequence? Solution : The frequency of x(t) is missing. \\square","title":"2.2"},{"location":"udsp02ex/#23","text":"National Instruments Corporation produces an analog-to-digital (A/D) converter (Model #NI-5154) that can sample (digitize) an analog signal at a sample rate of fs=2.0 GHz (gigahertz). (a) What is the t_s period of the output samples of such a device? Solution : The t_s = 500 \\text{ ps} . (b) Each A/D output sample is an 8-bit binary word (one byte), and the converter is able to store 256 million samples. What is the maximum time interval over which the converter can continuously sample an analog signal? Solution : It can sample 2 \\times 10^9 samples per second. Then it can only sample for \\frac{256 \\cdot 10^6}{2 \\times 10^9} = 0.128 \\text{ second} \\square","title":"2.3"},{"location":"udsp02ex/#24","text":"Consider a continuous time-domain sinewave, whose cyclic frequency is 500 Hz, defined by x(t) = \\cos [2 \\pi (500) t + \\pi / 7] Write the equation for the discrete x(n) sinewave sequence that results from sampling x(t) at an f_s sample rate of 4000 Hz. Solution : f_o = 500, f_s = 4000 , so t_s = 1/4000 . Then x(n) = \\cos [2 \\pi \\frac{n}{8} + \\pi / 7] \\square","title":"2.4"},{"location":"udsp02ex/#25","text":"If we sampled a single continuous sinewave whose frequency is f_o Hz, over what range must t_s (the time between digital samples) be to satisfy the Nyquist criterion? Express that t_s range in terms of f_o . Solution : We need to have f_s \\geq 2 f_o , i.e. \\frac{1}{t_s} \\geq 2 f_o . So t_s \\leq \\frac{1}{2 f_o} \\square","title":"2.5"},{"location":"udsp02ex/#26","text":"Suppose we used the following statement to describe the Nyquist criterion for lowpass sampling: \u201cWhen sampling a single continuous sinusoid (a single analog tone), we must obtain no fewer than N discrete samples per continu- ous sinewave cycle.\u201d What is the value of this integer N ? Solution N = 2 . \\square","title":"2.6"},{"location":"udsp02ex/#27","text":"The Nyquist criterion, regarding the sampling of lowpass signals, is sometimes stated as \u201cThe sampling rate fs must be equal to, or greater than, twice the highest spectral component of the continuous signal being sampled.\u201d Can you think of how a continuous sinusoidal signal can be sampled in accordance with that Nyquist criterion definition to yield all zero-valued discrete samples? Solution : Consider x(t) = \\sin 2 \\pi \\frac{f_s}{2} t Then x(n) = \\sin 2 \\pi \\frac{f_s}{2} n \\frac{1}{f_s} = \\sin n \\pi = 0 \\square","title":"2.7"},{"location":"udsp02ex/#28","text":"Stock market analysts study time-domain charts (plots) of the closing price of stock shares. A typical plot takes the form of that in Figure P2\u20138, where in- stead of plotting discrete closing price sample values as dots, they draw straight lines connecting the closing price value samples. What is the t_s period for such stock market charts? Solution : The t_s is one day, 24 hours. \\square","title":"2.8"},{"location":"udsp02ex/#29","text":"Consider a continuous time-domain sinewave defined by x(t) = \\cos (4000 \\pi t) that was sampled to produce the discrete sinewave sequence defined by x(n) = \\cos (n \\pi / 2) What is the f_s sample rate, measured in Hz, that would result in sequence x(n) ? Solution : x(t) = \\cos (2 f_o \\pi t) = \\cos (4000 \\pi t) , so f_o = 2000 Hz. Then x(n) = \\cos 2 \\pi f_o n \\frac{1}{f_s} = \\cos 4000 \\pi n \\frac{1}{f_s} So 4000 \\pi n \\frac{1}{f_s} = n \\pi / 2 \\\\ \\Rightarrow f_s = 8000 \\text{ Hz} \\square","title":"2.9"}]}